#!/usr/bin/python3
"""
Module that attempts to find prime factors of an RSA number using Pollard's rho algorithm.
"""

import sys
from math import gcd
from random import randint


def pollards_rho(n):
    """
    Pollard's rho algorithm for factorization.
    """
    if n % 2 == 0:
        return 2

    x = randint(1, n-1)
    y = x
    c = randint(1, n-1)
    d = 1

    f = lambda x: (x ** 2 + c) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)

    return d


def main():
    """
    Main function to find prime factors of an RSA number.
    """
    if len(sys.argv) != 2:
        print("Usage: {} <number>".format(sys.argv[0]))
        sys.exit(1)

    n = int(sys.argv[1])

    factor = pollards_rho(n)

    if factor == n:
        print("Unable to find prime factors.")
    else:
        print("Prime factor: {}".format(factor))


if __name__ == "__main__":
    main()
